# ローカル開発環境変数設定例
# 新しいチームメンバー向けの設定テンプレート

# === ローカル開発用 ===
POSTGRES_USER="postgres"
POSTGRES_PASSWORD="password"
POSTGRES_DB="apps_script_hub_db"
DATABASE_URL="postgresql://postgres:password@localhost:5433/apps_script_hub_db"

# テスト環境用PostgreSQL設定
POSTGRES_TEST_DB="apps_script_hub_test_db"
DATABASE_TEST_URL="postgresql://postgres:password@localhost:5433/apps_script_hub_test_db"

NODE_ENV="development"

# GitHub API トークン（公開リポジトリ読み取り専用）
# Personal Access Token を生成してここに設定してください
# スコープ: public_repo（公開リポジトリの読み取り）
GITHUB_TOKEN=""

# OpenAI API キー（ライブラリ要約生成用）
# OpenAI Platform (https://platform.openai.com/) でAPI キーを生成してください
OPENAI_API_KEY=""

# Google OAuth設定（管理者認証用）
# Google Cloud Consoleで取得したOAuth 2.0認証情報
# 手順：
# 1. Google Cloud Console → 認証情報 → OAuth 2.0 クライアント ID 作成
# 2. アプリケーションの種類: ウェブアプリケーション
# 3. 承認済みのリダイレクト URI:
#    - 開発環境: http://localhost:5173/auth/callback/google
#    - 本番環境: https://your-domain.com/auth/callback/google
# 4. 以下の値をGoogle Cloud Consoleから取得して設定
GOOGLE_CLIENT_ID="your-google-client-id.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="your-google-client-secret"

# Auth.js秘密鍵（セッション暗号化用）
# 本番環境では必ず変更してください
# 生成方法: openssl rand -base64 32
AUTH_SECRET="your-auth-secret-key-replace-in-production"

# 管理者ユーザー設定
# 管理画面(/admin)にアクセス可能なメールアドレスをカンマ区切りで指定
# 例: "admin1@example.com,admin2@example.com"
ADMIN_EMAILS="your-admin-email@example.com"

# === セットアップ手順 ===
# 1. このファイルを .env にコピー
# 2. Docker: docker-compose up -d
# 3. スキーマ: npm run db:push --force
# 4. Google OAuth設定（Google Cloud Console）
# 5. 開発開始: npm run dev

