import { env } from '$env/dynamic/private';
import { ERROR_MESSAGES } from '$lib/constants/error-messages.js';
import { GitHubApiUtils } from '$lib/server/utils/github-api-utils.js';

/**
 * E2E„ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÇíÁîüÊàê
 */
function generateE2EMockData(owner: string, repo: string) {
  // „ÉÜ„Çπ„Éà„Åß‰ΩøÁî®„Åô„Çã‰∏ÄËà¨ÁöÑ„Å™„É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±„ÅÆ„É¢„ÉÉ„ÇØ
  const mockData = {
    name: repo,
    description: `Mock repository for E2E testing: ${owner}/${repo}`,
    authorName: owner,
    authorUrl: `https://github.com/${owner}`,
    repositoryUrl: `https://github.com/${owner}/${repo}`,
    starCount: 42,
  };

  // ÁâπÂÆö„ÅÆ„ÉÜ„Çπ„Éà„Ç±„Éº„ÇπÁî®„ÅÆ„Ç´„Çπ„Çø„É†„Éá„Éº„Çø
  if (owner === 'googleworkspace' && repo === 'apps-script-oauth2') {
    return {
      name: 'apps-script-oauth2',
      description: 'An OAuth2 library for Google Apps Script.',
      authorName: 'googleworkspace',
      authorUrl: 'https://github.com/googleworkspace',
      repositoryUrl: 'https://github.com/googleworkspace/apps-script-oauth2',
      starCount: 1234,
    };
  }

  return mockData;
}

/**
 * GitHub „É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±„ÇíÂèñÂæó„Åô„Çã„Çµ„Éº„Éì„Çπ
 */
export class FetchGithubRepoService {
  /**
   * GitHub API „Åã„Çâ„É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±„ÇíÂèñÂæó„Åô„Çã
   * @param owner „É™„Éù„Ç∏„Éà„É™„ÅÆÊâÄÊúâËÄÖ
   * @param repo „É™„Éù„Ç∏„Éà„É™Âêç
   * @returns GitHub „É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±
   */
  static async call(owner: string, repo: string) {
    // E2E„ÉÜ„Çπ„Éà„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÇíËøî„Åô
    if (env.PLAYWRIGHT_TEST_MODE === 'true') {
      console.log(`ü§ñ [E2E Mock] „É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠: ${owner}/${repo} („É¢„ÉÉ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®)`);
      // ÂÆüÈöõ„ÅÆAPI„É¨„Çπ„Éù„É≥„ÇπÊôÇÈñì„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
      await new Promise(resolve => setTimeout(resolve, 100));

      // Â≠òÂú®„Åó„Å™„ÅÑ„É™„Éù„Ç∏„Éà„É™„ÅÆ„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ
      if (owner === 'nonexistent-user-999999' && repo === 'nonexistent-repo-999999') {
        throw new Error(ERROR_MESSAGES.REPOSITORY_NOT_FOUND);
      }

      return generateE2EMockData(owner, repo);
    }
    const headers = GitHubApiUtils.createHeaders();

    const response = await fetch(`https://api.github.com/repos/${owner}/${repo}`, { headers });

    if (!response.ok) {
      if (response.status === 404) {
        throw new Error(ERROR_MESSAGES.REPOSITORY_NOT_FOUND);
      }
      if (response.status === 403) {
        throw new Error(ERROR_MESSAGES.GITHUB_API_RATE_LIMIT);
      }
      throw new Error(ERROR_MESSAGES.GITHUB_REPO_INFO_FETCH_FAILED);
    }

    const repoData = await response.json();

    return {
      name: repoData.name,
      description: repoData.description || '',
      authorName: repoData.owner.login,
      authorUrl: `https://github.com/${repoData.owner.login}`,
      repositoryUrl: repoData.html_url,
      starCount: repoData.stargazers_count || 0,
    };
  }
}
